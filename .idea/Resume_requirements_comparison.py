import streamlit as st
from AnalyzatorResumeModel import LLMRequest_GetResult_base
from openai import OpenAI
from api_seatable import SeatableSettings
import httpx
from keys import openai_key, seatable_api_prompts, proxy_url
import PyPDF2

proxies = {
    "http://": proxy_url,
    "https://": proxy_url,
}

seatable_settings = SeatableSettings("https://cloud.seatable.io", seatable_api_prompts)
openai_client = OpenAI(http_client=httpx.Client(proxies=proxies), api_key=(openai_key))




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ LLMRequest_GetResult_base
def create_llm_request(candidate_resume, job_summary):
    # –ó–¥–µ—Å—å —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    openaiclient = openai_client
    seasettings = seatable_settings
    return LLMRequest_GetResult_base(openaiclient, seasettings, candidate_resume, job_summary)



st.set_page_config(
    page_title="Resume_requirements_comparison",
    page_icon="üßä",
    layout="wide",
)


def convert_pdf_to_text(file_pdf):
    pdf_reader = PyPDF2.PdfFileReader(file_pdf)
    text = ""
    for page_num in range(pdf_reader.numPages):
        page = pdf_reader.getPage(page_num)
        text += page.extractText()
    return text

st.markdown(
    """
    <div style='text-align: center; padding: 20px;'>
        <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ!</h1>
        <p>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–≤–∞ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.</p>
        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é.</p>
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown('**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ :**')

file_resume_candidate = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü—Ä–∏–Ω–∏–º–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç - .JSON", type=['json'])
st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞  :**")
file_resume_job_summary = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –ü—Ä–∏–Ω–∏–º–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç - .PDF", type=[ 'pdf'])



if st.button('Process Files'):
    if file_resume_job_summary and file_resume_candidate:
            with st.spinner():
                lml_request = create_llm_request(file_resume_candidate, file_resume_job_summary)
                result = lml_request.query()
                st.write(result)
                # result_number = find_elements_in_square_brackets(result)
                # st.title(f' –í—ã–≤–æ–¥ –æ—Ü–µ–Ω–∫–∏ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ {result_number}')
